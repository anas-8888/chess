import jwt from 'jsonwebtoken';
import config from '../../config/index.js';
import User from '../models/User.js';
import Invite from '../models/Invite.js';
import Game from '../models/Game.js';
import { Op } from 'sequelize';
import logger from '../utils/logger.js';

// Store active user connections - ุชุญุณูู ูุชุชุจุน ุฌููุน ุงูุงุชุตุงูุงุช ููู ูุณุชุฎุฏู
const activeUsers = new Map(); // userId -> Set of socketIds
const activeGames = {};
const gameTimers = {};

// Store previous stats for comparison
let previousStats = { totalUsers: 0, totalConnections: 0 };

// Configuration for logging
const LOG_CONFIG = {
  showDetailedConnections: false, // ุชุนุทูู ุงูุฑุณุงุฆู ุงูุชูุตูููุฉ ููุงุชุตุงูุงุช
  showStatusUpdates: true,        // ุฅุธูุงุฑ ุชุญุฏูุซุงุช ุงูุญุงูุฉ
  showStats: true                // ุฅุธูุงุฑ ุงูุฅุญุตุงุฆูุงุช
};

// Function to update logging configuration
export function updateLogConfig(newConfig) {
  Object.assign(LOG_CONFIG, newConfig);
  logger.info('ุชู ุชุญุฏูุซ ุฅุนุฏุงุฏุงุช ุงูุชุณุฌูู', LOG_CONFIG);
}

// Function to get current log config
export function getLogConfig() {
  return { ...LOG_CONFIG };
}

// Function to disable all detailed logging
export function disableDetailedLogging() {
  updateLogConfig({
    showDetailedConnections: false,
    showStatusUpdates: false,
    showStats: false
  });
  logger.info('ุชู ุชุนุทูู ุฌููุน ุงูุฑุณุงุฆู ุงูุชูุตูููุฉ');
}

// Function to enable minimal logging (only important events)
export function enableMinimalLogging() {
  updateLogConfig({
    showDetailedConnections: false,
    showStatusUpdates: true,  // ุฅุธูุงุฑ ููุท ุชุญุฏูุซุงุช ุงูุญุงูุฉ ุงููููุฉ
    showStats: false
  });
  logger.info('ุชู ุชูุนูู ุงูุชุณุฌูู ุงูุจุณูุท (ุงูุฃุญุฏุงุซ ุงููููุฉ ููุท)');
}

// Authentication helper
export function authenticateSocket(socket) {
  try {
    // Try JWT first
    const token = socket.handshake.auth.token || socket.handshake.query.token;
    if (token) {
      const decoded = jwt.verify(token, config.jwt.secret);
      return decoded.user_id;
    }
    
    // Fallback to userId in query
    const userId = parseInt(socket.handshake.query.userId);
    if (!userId || isNaN(userId)) {
      throw new Error('Authentication required');
    }
    
    return userId;
  } catch (error) {
    throw new Error('Authentication failed');
  }
}

// User connection management
export function addUserConnection(userId, socketId) {
  if (!activeUsers.has(userId)) {
    activeUsers.set(userId, new Set());
  }
  activeUsers.get(userId).add(socketId);
  
  const totalConnections = activeUsers.get(userId).size;
  
  // ุชุญุฏูุซ ุญุงูุฉ ุงููุณุชุฎุฏู ุฅูู online ุนูุฏ ุฃูู ุงุชุตุงู
  if (totalConnections === 1) {
    updateUserStatus(userId, 'online').catch(error => {
      logger.error('ุฎุทุฃ ูู ุชุญุฏูุซ ุญุงูุฉ ุงููุณุชุฎุฏู ุฅูู online', error);
    });
  }
  
  // ุทุจุงุนุฉ ุฑุณุงูุฉ ููุท ุนูุฏ ุฃูู ุงุชุตุงู ุฃู ุนูุฏ ุชุบููุฑ ุนุฏุฏ ุงูุงุชุตุงูุงุช
  if (LOG_CONFIG.showDetailedConnections) {
    if (totalConnections === 1) {
      logger.debug(`ุงุชุตุงู ุฌุฏูุฏ ูููุณุชุฎุฏู ${userId} (${socketId})`);
    } else {
      logger.debug(`ุงุชุตุงู ุฅุถุงูู ูููุณุชุฎุฏู ${userId} - ุฅุฌูุงูู ุงูุงุชุตุงูุงุช: ${totalConnections}`);
    }
  }
}

export function removeUserConnection(userId, socketId) {
  if (activeUsers.has(userId)) {
    activeUsers.get(userId).delete(socketId);
    
    const remainingConnections = activeUsers.get(userId).size;
    
    // ุฅุฐุง ูู ูุชุจู ุฃู ุงุชุตุงูุงุชุ ุงุญุฐู ุงููุณุชุฎุฏู ูู ุงููุงุฆูุฉ ูุชุญุฏูุซ ุงูุญุงูุฉ ุฅูู offline
    if (remainingConnections === 0) {
      activeUsers.delete(userId);
      logger.debug(`โ ุชู ูุทุน ุฌููุน ุงุชุตุงูุงุช ุงููุณุชุฎุฏู ${userId}`);
      
      // ุชุญุฏูุซ ุญุงูุฉ ุงููุณุชุฎุฏู ุฅูู offline ุนูุฏ ูุทุน ุขุฎุฑ ุงุชุตุงู
      updateUserStatus(userId, 'offline').catch(error => {
        logger.error('ุฎุทุฃ ูู ุชุญุฏูุซ ุญุงูุฉ ุงููุณุชุฎุฏู ุฅูู offline', error);
      });
    } else if (LOG_CONFIG.showDetailedConnections) {
      logger.debug(`โ ุงุชุตุงู ุฃูู ูููุณุชุฎุฏู ${userId} - ุงูุงุชุตุงูุงุช ุงููุชุจููุฉ: ${remainingConnections}`);
    }
  }
}

export function getUserConnections(userId) {
  return activeUsers.get(userId) || new Set();
}

export function isUserOnline(userId) {
  return activeUsers.has(userId) && activeUsers.get(userId).size > 0;
}

// User status management
export async function updateUserStatus(userId, status) {
  try {
    if (!userId || !status) {
      logger.error('ุจูุงูุงุช ุชุญุฏูุซ ุญุงูุฉ ุงููุณุชุฎุฏู ุบูุฑ ููุชููุฉ:', { userId, status });
      return;
    }
    
    // ุงูุชุญูู ูู ุตุญุฉ ุงูุญุงูุฉ ุญุณุจ ูููุฐุฌ User
    const validStatuses = ['online', 'offline', 'in-game'];
    if (!validStatuses.includes(status)) {
      logger.error('ุญุงูุฉ ูุณุชุฎุฏู ุบูุฑ ุตุญูุญุฉ:', status);
      return;
    }
    
    // ุงูุชุญูู ูู ูุฌูุฏ ุงููุณุชุฎุฏู ุฃููุงู
    const user = await User.findByPk(userId);
    if (!user) {
      logger.error('ุงููุณุชุฎุฏู ุบูุฑ ููุฌูุฏ:', userId);
      return;
    }
    
    // ุงูุชุญูู ูู ุงูุญุงูุฉ ุงูุญุงููุฉ ูุจู ุงูุชุญุฏูุซ
    if (user.state === status) {
      logger.debug(`ุงููุณุชุฎุฏู ${userId} ุญุงูุชู ${status} ุจุงููุนูุ ุชุฎุทู ุงูุชุญุฏูุซ`);
      return;
    }
    
    // ุชุญุฏูุซ ุงูุญุงูุฉ ููุท ุฅุฐุง ุชุบูุฑุช ูุนููุงู
    const oldStatus = user.state;
    await User.update(
      { state: status },
      { where: { user_id: userId } }
    );
    
    const connectionsCount = getUserConnections(userId).size;
    
    // ุทุจุงุนุฉ ุฑุณุงุฆู ูุญุณูุฉ ููุท ุฅุฐุง ูุงู ููุนูุงู
    if (LOG_CONFIG.showStatusUpdates) {
      if (status === 'online' && connectionsCount > 0) {
        logger.info(`๐ข ุงููุณุชุฎุฏู ${userId} ูุชุตู ุงูุขู (${connectionsCount} ุงุชุตุงู)`);
      } else if (status === 'offline') {
        logger.info(`๐ด ุงููุณุชุฎุฏู ${userId} ุบูุฑ ูุชุตู`);
      } else if (status === 'in-game') {
        logger.info(`๐ฎ ุงููุณุชุฎุฏู ${userId} ูู ูุจุงุฑุงุฉ`);
      }
    }
    
    // ุฅุฑุณุงู ุชุญุฏูุซ ุงูุญุงูุฉ ูุฌููุน ุฃุตุฏูุงุก ุงููุณุชุฎุฏู ููุท ุฅุฐุง ุชุบูุฑุช ุงูุญุงูุฉ
    await broadcastFriendStatusUpdate(userId, status);
    
    // ุชุณุฌูู ุงูุชุญุฏูุซ ูุฑุฉ ูุงุญุฏุฉ ููุท
    logger.debug(`ุชู ุชุญุฏูุซ ุญุงูุฉ ุงููุณุชุฎุฏู ${userId} ูู ${oldStatus} ุฅูู ${status}`);
  } catch (error) {
    logger.error('Error updating user status:', error);
  }
}

// ุฏุงูุฉ ูุฅุฑุณุงู ุญุงูุฉ ุงูุฃุตุฏูุงุก ูููุณุชุฎุฏู ุงูุฌุฏูุฏ
export async function sendFriendsStatusToUser(socket, userId) {
  try {
    // ุงุณุชูุฑุงุฏ ูููุฐุฌ Friend
    const Friend = await import('../models/Friend.js');
    
    // ุงูุจุญุซ ุนู ุฌููุน ุฃุตุฏูุงุก ุงููุณุชุฎุฏู
    const friends = await Friend.default.findAll({
      where: {
        [Op.or]: [
          { user_id: userId },
          { friend_user_id: userId }
        ],
        status: 'accepted'
      }
    });
    
    // ุฅุฑุณุงู ุญุงูุฉ ูู ุตุฏูู
    for (const friend of friends) {
      const friendUserId = friend.user_id === userId ? friend.friend_user_id : friend.user_id;
      
      // ุงูุญุตูู ุนูู ุญุงูุฉ ุงูุตุฏูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
      const friendUser = await User.findByPk(friendUserId);
      if (friendUser) {
        socket.emit('friendStatusChanged', {
          userId: friendUserId,
          status: friendUser.state,
          timestamp: new Date()
        });
      }
    }
    
    logger.debug(`๐ก ุชู ุฅุฑุณุงู ุญุงูุฉ ${friends.length} ุตุฏูู ูููุณุชุฎุฏู ${userId}`);
  } catch (error) {
    logger.error('ุฎุทุฃ ูู ุฅุฑุณุงู ุญุงูุฉ ุงูุฃุตุฏูุงุก:', error);
  }
}

// ุฏุงูุฉ ูุฅุฑุณุงู ุชุญุฏูุซ ุญุงูุฉ ุงููุณุชุฎุฏู ูุฌููุน ุฃุตุฏูุงุฆู
async function broadcastFriendStatusUpdate(userId, status) {
  try {
    // ุงุณุชูุฑุงุฏ ูููุฐุฌ Friend
    const Friend = await import('../models/Friend.js');
    
    // ุงูุจุญุซ ุนู ุฌููุน ุฃุตุฏูุงุก ุงููุณุชุฎุฏู
    const friends = await Friend.default.findAll({
      where: {
        [Op.or]: [
          { user_id: userId },
          { friend_user_id: userId }
        ],
        status: 'accepted'
      }
    });
    
    // ุงูุชุญูู ูู ูุฌูุฏ ุฃุตุฏูุงุก ูุจู ุงูุฅุฑุณุงู
    if (friends.length === 0) {
      logger.debug(`ุงููุณุชุฎุฏู ${userId} ููุณ ูู ุฃุตุฏูุงุกุ ุชุฎุทู ุฅุฑุณุงู ุชุญุฏูุซ ุงูุญุงูุฉ`);
      return;
    }
    
    // ุฅุฑุณุงู ุงูุชุญุฏูุซ ููู ุตุฏูู
    let sentCount = 0;
    for (const friend of friends) {
      const friendUserId = friend.user_id === userId ? friend.friend_user_id : friend.user_id;
      
      // ุฅุฑุณุงู ุงูุชุญุฏูุซ ุนุจุฑ Socket.IO
      const io = global.io;
      if (io) {
        io.to(`user_${friendUserId}`).emit('friendStatusChanged', {
          userId: userId,
          status: status,
          timestamp: new Date()
        });
        sentCount++;
      }
    }
    
    if (sentCount > 0) {
      logger.debug(`๐ก ุชู ุฅุฑุณุงู ุชุญุฏูุซ ุญุงูุฉ ุงููุณุชุฎุฏู ${userId} (${status}) ูู ${sentCount} ุตุฏูู`);
    } else {
      logger.debug(`ูู ูุชู ุฅุฑุณุงู ุฃู ุชุญุฏูุซุงุช ูููุณุชุฎุฏู ${userId} (${status})`);
    }
  } catch (error) {
    logger.error('ุฎุทุฃ ูู ุฅุฑุณุงู ุชุญุฏูุซ ุญุงูุฉ ุงูุฃุตุฏูุงุก:', error);
  }
}

// Game creation helpers
export async function createGame(invite) {
  try {
    // ุชุญุฏูุฏ ูู ููุนุจ ุจุงูุฃุจูุถ (ุนุดูุงุฆูุงู)
    const isWhiteRandom = Math.random() < 0.5;
    const whiteUserId = isWhiteRandom ? invite.from_user_id : invite.to_user_id;
    const blackUserId = isWhiteRandom ? invite.to_user_id : invite.from_user_id;
    
    // ุฅูุดุงุก ุงููุจุงุฑุงุฉ ูุน ุงูุญููู ุงูุตุญูุญุฉ ุญุณุจ ูููุฐุฌ Game
    const game = await Game.create({
      whiteUserId: whiteUserId,
      blackUserId: blackUserId,
      whitePlayMethod: invite.play_method,
      blackPlayMethod: invite.play_method,
      gameTime: '10', // ุงููููุฉ ุงูุงูุชุฑุงุถูุฉ ุญุณุจ ูููุฐุฌ Game
      mode: invite.game_type,
      status: 'in_progress',
      dateTime: new Date(),
    });
    
    logger.info('ุชู ุฅูุดุงุก ูุจุงุฑุงุฉ ุฌุฏูุฏุฉ:', {
      gameId: game.id,
      whiteUserId: whiteUserId,
      blackUserId: blackUserId,
      playMethod: invite.play_method,
      gameType: invite.game_type
    });
    
    return game;
  } catch (error) {
    logger.error('ุฎุทุฃ ูู ุฅูุดุงุก ุงููุจุงุฑุงุฉ:', error);
    throw error;
  }
}

export async function createGameWithMethods(invite) {
  try {
    // ุชุญุฏูุฏ ูู ููุนุจ ุจุงูุฃุจูุถ (ุนุดูุงุฆูุงู)
    const isWhiteRandom = Math.random() < 0.5;
    const whiteUserId = isWhiteRandom ? invite.from_user_id : invite.to_user_id;
    const blackUserId = isWhiteRandom ? invite.to_user_id : invite.from_user_id;
    
    // ุชุญุฏูุฏ ุทุฑููุชู ุงููุนุจ ููู ูุงุนุจ
    const whitePlayMethod = isWhiteRandom ? invite.play_method : invite.play_method;
    const blackPlayMethod = isWhiteRandom ? invite.play_method : invite.play_method;
    
    // ุฅูุดุงุก ุงููุจุงุฑุงุฉ ูุน ุงูุญููู ุงูุตุญูุญุฉ ุญุณุจ ูููุฐุฌ Game
    const game = await Game.create({
      whiteUserId: whiteUserId,
      blackUserId: blackUserId,
      whitePlayMethod: whitePlayMethod,
      blackPlayMethod: blackPlayMethod,
      gameTime: '10', // ุงููููุฉ ุงูุงูุชุฑุงุถูุฉ ุญุณุจ ูููุฐุฌ Game
      mode: invite.game_type,
      status: 'in_progress',
      dateTime: new Date(),
    });
    
    logger.info('ุชู ุฅูุดุงุก ูุจุงุฑุงุฉ ุฌุฏูุฏุฉ ูุน ุทุฑููุชู ุงููุนุจ:', {
      gameId: game.id,
      whiteUserId: whiteUserId,
      blackUserId: blackUserId,
      whitePlayMethod: whitePlayMethod,
      blackPlayMethod: blackPlayMethod,
      gameType: invite.game_type
    });
    
    return game;
  } catch (error) {
    logger.error('ุฎุทุฃ ูู ุฅูุดุงุก ุงููุจุงุฑุงุฉ ูุน ุทุฑููุชู ุงููุนุจ:', error);
    throw error;
  }
}

// Invite management helpers
export async function handleGameInvite(socket, nsp, userId, { toUserId, gameType, playMethod }) {
  try {
    logger.info('ุฅุฑุณุงู ุฏุนูุฉ ูุนุจ:', { fromUserId: userId, toUserId, gameType, playMethod });

    // ูุญุต ุงูุจูุงูุงุช ุงููุทููุจุฉ
    if (!toUserId || !gameType || !playMethod) {
      return socket.emit('error', { message: 'ุจูุงูุงุช ุงูุฏุนูุฉ ุบูุฑ ููุชููุฉ' });
    }

    // Check if recipient exists and is online
    const recipient = await User.findByPk(toUserId);
    if (!recipient) {
      return socket.emit('error', { message: 'ุงููุณุชุฎุฏู ุบูุฑ ููุฌูุฏ' });
    }

    // Check recipient's current status
    if (recipient.state === 'offline') {
      return socket.emit('error', { message: 'ุงููุณุชุฎุฏู ุบูุฑ ูุชุตู ุญุงููุงู' });
    }

    if (recipient.state === 'in-game') {
      return socket.emit('error', { message: 'ุงููุณุชุฎุฏู ูุดุบูู ูู ูุจุงุฑุงุฉ ุฃุฎุฑู' });
    }

    // ูุญุต ุญุงูุฉ ุงููุฑุณู ุฃูุถุงู
    const sender = await User.findByPk(userId);
    if (!sender) {
      return socket.emit('error', { message: 'ุฎุทุฃ ูู ุงููุตุงุฏูุฉ' });
    }

    if (sender.state === 'offline') {
      return socket.emit('error', { message: 'ูุฌุจ ุฃู ุชููู ูุชุตูุงู ูุฅุฑุณุงู ุฏุนูุฉ' });
    }

    if (sender.state === 'in-game') {
      return socket.emit('error', { message: 'ูุง ูููู ุฅุฑุณุงู ุฏุนูุฉ ุฃุซูุงุก ุงููุนุจ' });
    }

    // Check if there's already a pending invite
    const existingInvite = await Invite.findOne({
      where: {
        from_user_id: userId,
        to_user_id: toUserId,
        status: {
          [Op.or]: ['pending', null]
        },
      },
    });

    if (existingInvite) {
      return socket.emit('error', { message: 'ููุฌุฏ ุฏุนูุฉ ูุนููุฉ ุจุงููุนู ููุฐุง ุงููุณุชุฎุฏู' });
    }

    // Create invite in database with ุงูุญููู ุงูุตุญูุญุฉ ุญุณุจ ูููุฐุฌ Invite
    const invite = await Invite.create({
      from_user_id: userId,
      to_user_id: toUserId,
      status: 'pending', // ุงุณุชุฎุฏุงู ุงููููุฉ ุงูุงูุชุฑุงุถูุฉ ุจุฏูุงู ูู null
      game_type: gameType,
      play_method: playMethod,
      date_time: new Date(),
      expires_at: new Date(Date.now() + 60 * 60 * 1000), // 1 hour
    });

    // Broadcast to recipient
    nsp.to(`user::${toUserId}`).emit('inviteCreated', {
      invite: {
        id: invite.id,
        from_user_id: invite.from_user_id,
        to_user_id: invite.to_user_id,
        game_type: invite.game_type,
        play_method: invite.play_method,
        status: invite.status,
        date_time: invite.date_time,
        expires_at: invite.expires_at,
      },
    });

    // Confirm to sender
    socket.emit('gameInviteSent', { success: true, inviteId: invite.id });
    
    logger.info('ุชู ุฅุฑุณุงู ุฏุนูุฉ ุจูุฌุงุญ:', invite.id);
  } catch (error) {
    logger.error('ุฎุทุฃ ูู ุฅุฑุณุงู ุฏุนูุฉ ูุนุจ:', error);
    socket.emit('error', { message: error.message || 'ูุดู ูู ุฅุฑุณุงู ุงูุฏุนูุฉ' });
  }
}

export async function handleInviteResponse(socket, nsp, userId, { inviteId, response }) {
  try {
    logger.info('ุฑุฏ ุนูู ุฏุนูุฉ ูุนุจ:', { inviteId, response, userId });
    
    // ูุญุต ุงูุจูุงูุงุช ุงููุทููุจุฉ
    if (!inviteId || !response) {
      return socket.emit('error', { message: 'ุจูุงูุงุช ุงูุฑุฏ ุบูุฑ ููุชููุฉ' });
    }
    
    const invite = await Invite.findByPk(inviteId);
    if (!invite) {
      return socket.emit('error', { message: 'Invite not found' });
    }

    if (invite.to_user_id !== userId) {
      return socket.emit('error', { message: 'Not authorized' });
    }

    // ูุญุต ุตูุงุญูุฉ ุงูุฏุนูุฉ
    const now = new Date();
    const inviteDate = new Date(invite.date_time);
    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
    
    if (inviteDate.getTime() < oneHourAgo.getTime()) {
      return socket.emit('error', { message: 'ุงูุชูุช ุตูุงุญูุฉ ุงูุฏุนูุฉ' });
    }

    // Update invite status
    await invite.update({ status: response });

    // Notify sender
    nsp.to(`user::${invite.from_user_id}`).emit('gameInviteResponse', {
      inviteId,
      response,
      fromUserId: invite.to_user_id,
    });

    // If accepted, create game and update player statuses
    if (response === 'accepted') {
      await invite.update({ status: 'accepted' });
      
      // ุฅุฑุณุงู ุฅุดุนุงุฑ ููุทุฑููู ุจูุจูู ุงูุฏุนูุฉ
      nsp.to(`user::${invite.from_user_id}`).emit('gameInviteAccepted', {
        inviteId: invite.id,
        fromUserId: invite.from_user_id,
        toUserId: invite.to_user_id,
        playMethod: invite.play_method,
        gameType: invite.game_type
      });
      
      nsp.to(`user::${invite.to_user_id}`).emit('gameInviteAccepted', {
        inviteId: invite.id,
        fromUserId: invite.from_user_id,
        toUserId: invite.to_user_id,
        playMethod: invite.play_method,
        gameType: invite.game_type
      });
    } else if (response === 'rejected') {
      // ุชุญุฏูุซ ุญุงูุฉ ุงููุณุชุฎุฏููู ุฅูู offline ุนูุฏ ุงูุฑูุถ
      await Promise.all([
        updateUserStatus(invite.from_user_id, 'offline'),
        updateUserStatus(invite.to_user_id, 'offline')
      ]);
      
      // Broadcast status updates
      nsp.emit('playerStatusChanged', {
        userId: invite.from_user_id,
        status: 'offline'
      });
      nsp.emit('playerStatusChanged', {
        userId: invite.to_user_id,
        status: 'offline'
      });
    }

    // Remove invite from recipient's list
    socket.emit('inviteRemoved', { inviteId });
  } catch (error) {
    logger.error('ุฎุทุฃ ูู ุงูุฑุฏ ุนูู ุฏุนูุฉ ูุนุจ:', error);
    socket.emit('error', { message: error.message });
  }
}

// Game management helpers
export function startClock(nsp, gameId, game) {
  if (gameTimers[gameId]) return;
  
  let whiteTime = 300000; // 5 minutes in milliseconds
  let blackTime = 300000;
  let turn = 'white';

  gameTimers[gameId] = setInterval(() => {
    if (turn === 'white') {
      whiteTime -= 1000;
      if (whiteTime <= 0) {
        nsp
          .to(`game::${gameId}`)
          .emit('gameEnd', { result: 'black_win', reason: 'timeout' });
        stopClock(gameId);
      }
    } else {
      blackTime -= 1000;
      if (blackTime <= 0) {
        nsp
          .to(`game::${gameId}`)
          .emit('gameEnd', { result: 'white_win', reason: 'timeout' });
        stopClock(gameId);
      }
    }
    nsp.to(`game::${gameId}`).emit('clock', { whiteTime, blackTime });
  }, 1000);
}

export function stopClock(gameId) {
  if (gameTimers[gameId]) {
    clearInterval(gameTimers[gameId]);
    delete gameTimers[gameId];
  }
}

// Cleanup helpers
export async function cleanupExpiredInvites(nsp) {
  try {
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    
    const expiredInvites = await Invite.findAll({
      where: {
        status: {
          [Op.or]: ['pending', null]
        },
        date_time: {
          [Op.lt]: oneHourAgo
        }
      }
    });
    
    if (expiredInvites.length > 0) {
      await Invite.update(
        { status: 'expired' },
        {
          where: {
            id: expiredInvites.map(invite => invite.id)
          }
        }
      );
      
      for (const invite of expiredInvites) {
        await updateUserStatus(invite.from_user_id, 'offline');
        await updateUserStatus(invite.to_user_id, 'offline');
        
        nsp.to(`user::${invite.from_user_id}`).emit('inviteExpired', { 
          inviteId: invite.id,
          fromUserId: invite.from_user_id,
          toUserId: invite.to_user_id
        });
        nsp.to(`user::${invite.to_user_id}`).emit('inviteExpired', { 
          inviteId: invite.id,
          fromUserId: invite.from_user_id,
          toUserId: invite.to_user_id
        });
      }
      
      logger.info(`ุชู ุชุญุฏูุซ ${expiredInvites.length} ุฏุนูุฉ ููุชููุฉ ุงูุตูุงุญูุฉ`);
    }
  } catch (error) {
    logger.error('ุฎุทุฃ ูู ุชูุธูู ุงูุฏุนูุงุช ุงูููุชููุฉ:', error);
  }
}

// Monitoring and debugging functions
export function getConnectionStats() {
  const stats = {
    totalUsers: activeUsers.size,
    totalConnections: 0,
    userDetails: []
  };
  
  for (const [userId, connections] of activeUsers.entries()) {
    stats.totalConnections += connections.size;
    stats.userDetails.push({
      userId,
      connectionsCount: connections.size,
      socketIds: Array.from(connections)
    });
  }
  
  return stats;
}

export function logConnectionStats() {
  const stats = getConnectionStats();
  
  // ุทุจุงุนุฉ ุงูุฅุญุตุงุฆูุงุช ููุท ุฅุฐุง ูุงู ููุงู ุชุบููุฑ ูููุนูู
  const hasChanged = stats.totalUsers !== previousStats.totalUsers || 
                    stats.totalConnections !== previousStats.totalConnections;
  
  if (hasChanged && LOG_CONFIG.showStats) {
    if (stats.totalUsers > 0) {
      logger.info('๐ ุฅุญุตุงุฆูุงุช ุงูุงุชุตุงูุงุช:', {
        ูุณุชุฎุฏููู: stats.totalUsers,
        ุงุชุตุงูุงุช: stats.totalConnections
      });
      
      // ุทุจุงุนุฉ ุชูุงุตูู ุงููุณุชุฎุฏููู ููุท ุฅุฐุง ูุงู ููุงู ุฃูุซุฑ ูู ูุณุชุฎุฏู ูุงุญุฏ
      if (stats.userDetails.length > 1) {
        logger.info('๐ฅ ุชูุงุตูู ุงููุณุชุฎุฏููู:');
        stats.userDetails.forEach(user => {
          const icon = user.connectionsCount > 1 ? '๐ฑ' : '๐ป';
          logger.debug(`  ${icon} ุงููุณุชุฎุฏู ${user.userId}: ${user.connectionsCount} ุงุชุตุงู`);
        });
      }
    } else {
      logger.info('๐ด ูุง ููุฌุฏ ูุณุชุฎุฏููู ูุชุตููู ุญุงููุงู');
    }
    
    // ุชุญุฏูุซ ุงูุฅุญุตุงุฆูุงุช ุงูุณุงุจูุฉ
    previousStats = { totalUsers: stats.totalUsers, totalConnections: stats.totalConnections };
  }
}

// ุฏุงูุฉ ูุชุญุฏูุซ ุญุงูุฉ ุงููุณุชุฎุฏู ุนูุฏ ุงูุงูุณุญุงุจ
export async function updateUserStatusAfterResign(gameId, resignedUserId) {
  try {
    // ุงูุจุญุซ ุนู ุงููุจุงุฑุงุฉ
    const game = await Game.findByPk(gameId);
    if (!game) {
      logger.error('ุงููุจุงุฑุงุฉ ุบูุฑ ููุฌูุฏุฉ:', gameId);
      return;
    }
    
    // ุงูุชุญูู ูู ุญุงูุฉ ุงููุงุนุจูู ูุจู ุงูุชุญุฏูุซ
    const [resignedUser, otherUser] = await Promise.all([
      User.findByPk(resignedUserId),
      User.findByPk(game.whiteUserId === resignedUserId ? game.blackUserId : game.whiteUserId)
    ]);
    
    if (!resignedUser || !otherUser) {
      logger.error('ุฃุญุฏ ุงููุงุนุจูู ุบูุฑ ููุฌูุฏ:', { resignedUserId, otherUserId: game.whiteUserId === resignedUserId ? game.blackUserId : game.whiteUserId });
      return;
    }
    
    const otherUserId = game.whiteUserId === resignedUserId ? game.blackUserId : game.whiteUserId;
    const updatePromises = [];
    
    // ุชุญุฏูุซ ุญุงูุฉ ุงููุงุนุจ ุงูููุณุญุจ ุฅูู online
    if (resignedUser.state === 'in-game') {
      // ุงูุชุญูู ูู ุนุฏู ูุฌูุฏ ูุจุงุฑุงุฉ ูุดุทุฉ ุฃุฎุฑู ููุงุนุจ ุงูููุณุญุจ
      const activeGame = await Game.findOne({
        where: {
          [Op.or]: [
            { whiteUserId: resignedUserId },
            { blackUserId: resignedUserId }
          ],
          status: {
            [Op.in]: ['in-game', 'in_progress']
          },
          id: { [Op.ne]: gameId }
        }
      });
      
      if (!activeGame) {
        updatePromises.push(updateUserStatus(resignedUserId, 'online'));
      }
    }
    
    // ุชุญุฏูุซ ุญุงูุฉ ุงููุงุนุจ ุงูุขุฎุฑ ุฅูู online ุฃูุถุงู
    if (otherUser.state === 'in-game') {
      // ุงูุชุญูู ูู ุนุฏู ูุฌูุฏ ูุจุงุฑุงุฉ ูุดุทุฉ ุฃุฎุฑู ููุงุนุจ ุงูุขุฎุฑ
      const activeGame = await Game.findOne({
        where: {
          [Op.or]: [
            { whiteUserId: otherUserId },
            { blackUserId: otherUserId }
          ],
          status: {
            [Op.in]: ['in-game', 'in_progress']
          },
          id: { [Op.ne]: gameId }
        }
      });
      
      if (!activeGame) {
        updatePromises.push(updateUserStatus(otherUserId, 'online'));
      }
    }
    
    if (updatePromises.length > 0) {
      await Promise.all(updatePromises);
      logger.info(`๐ ุชู ุชุญุฏูุซ ุญุงูุฉ ุงููุงุนุจูู ุจุนุฏ ุงูุงูุณุญุงุจ ูู ุงููุจุงุฑุงุฉ ${gameId}`);
    } else {
      logger.debug(`โน๏ธ ูุง ุญุงุฌุฉ ูุชุญุฏูุซ ุญุงูุฉ ุงููุงุนุจูู ุจุนุฏ ุงูุงูุณุญุงุจ ูู ุงููุจุงุฑุงุฉ ${gameId} - ูุฏููู ูุจุงุฑูุงุช ุฃุฎุฑู ูุดุทุฉ`);
    }
  } catch (error) {
    logger.error('ุฎุทุฃ ูู ุชุญุฏูุซ ุญุงูุฉ ุงููุณุชุฎุฏููู ุจุนุฏ ุงูุงูุณุญุงุจ:', error);
  }
}

// ุฏุงูุฉ ูุชุญุฏูุซ ุญุงูุฉ ุงููุณุชุฎุฏู ุนูุฏ ุงูุชูุงุก ุงููุจุงุฑุงุฉ
export async function updateUserStatusAfterGameEnd(gameId) {
  try {
    // ุงูุจุญุซ ุนู ุงููุจุงุฑุงุฉ
    const game = await Game.findByPk(gameId);
    if (!game) {
      logger.error('ุงููุจุงุฑุงุฉ ุบูุฑ ููุฌูุฏุฉ:', gameId);
      return;
    }
    
    // ุงูุชุญูู ูู ุญุงูุฉ ุงููุงุนุจูู ูุจู ุงูุชุญุฏูุซ
    const [whiteUser, blackUser] = await Promise.all([
      User.findByPk(game.whiteUserId),
      User.findByPk(game.blackUserId)
    ]);
    
    if (!whiteUser || !blackUser) {
      logger.error('ุฃุญุฏ ุงููุงุนุจูู ุบูุฑ ููุฌูุฏ:', { whiteUserId: game.whiteUserId, blackUserId: game.blackUserId });
      return;
    }
    
    // ุชุญุฏูุซ ุญุงูุฉ ุงููุงุนุจูู ุฅูู online ููุท ุฅุฐุง ูู ูููููุง ูู ูุจุงุฑุงุฉ ุฃุฎุฑู
    const updatePromises = [];
    
    if (whiteUser.state === 'in-game') {
      // ุงูุชุญูู ูู ุนุฏู ูุฌูุฏ ูุจุงุฑุงุฉ ูุดุทุฉ ุฃุฎุฑู ููุงุนุจ ุงูุฃุจูุถ
      const activeGame = await Game.findOne({
        where: {
          [Op.or]: [
            { whiteUserId: game.whiteUserId },
            { blackUserId: game.whiteUserId }
          ],
          status: {
            [Op.in]: ['in-game', 'in_progress']
          },
          id: { [Op.ne]: gameId }
        }
      });
      
      if (!activeGame) {
        updatePromises.push(updateUserStatus(game.whiteUserId, 'online'));
      }
    }
    
    if (blackUser.state === 'in-game') {
      // ุงูุชุญูู ูู ุนุฏู ูุฌูุฏ ูุจุงุฑุงุฉ ูุดุทุฉ ุฃุฎุฑู ููุงุนุจ ุงูุฃุณูุฏ
      const activeGame = await Game.findOne({
        where: {
          [Op.or]: [
            { whiteUserId: game.blackUserId },
            { blackUserId: game.blackUserId }
          ],
          status: {
            [Op.in]: ['in-game', 'in_progress']
          },
          id: { [Op.ne]: gameId }
        }
      });
      
      if (!activeGame) {
        updatePromises.push(updateUserStatus(game.blackUserId, 'online'));
      }
    }
    
    if (updatePromises.length > 0) {
      await Promise.all(updatePromises);
      logger.info(`๐ ุชู ุชุญุฏูุซ ุญุงูุฉ ุงููุงุนุจูู ุจุนุฏ ุงูุชูุงุก ุงููุจุงุฑุงุฉ ${gameId}`);
    } else {
      logger.debug(`โน๏ธ ูุง ุญุงุฌุฉ ูุชุญุฏูุซ ุญุงูุฉ ุงููุงุนุจูู ุจุนุฏ ุงูุชูุงุก ุงููุจุงุฑุงุฉ ${gameId} - ูุฏููู ูุจุงุฑูุงุช ุฃุฎุฑู ูุดุทุฉ`);
    }
  } catch (error) {
    logger.error('ุฎุทุฃ ูู ุชุญุฏูุซ ุญุงูุฉ ุงููุณุชุฎุฏููู ุจุนุฏ ุงูุชูุงุก ุงููุจุงุฑุงุฉ:', error);
  }
}

// ุฏุงูุฉ ูุชูุธูู ุญุงูุงุช ุงููุณุชุฎุฏููู ุงููุชุฑููุฉ
export async function cleanupOrphanedUserStates() {
  try {
    logger.info('๐ ุจุฏุก ุชูุธูู ุญุงูุงุช ุงููุณุชุฎุฏููู ุงููุชุฑููุฉ...');
    
    // ุงูุจุญุซ ุนู ุงููุณุชุฎุฏููู ุงูุฐูู ุญุงูุชูู in-game
    const inGameUsers = await User.findAll({
      where: { state: 'in-game' }
    });
    
    let cleanedCount = 0;
    
    for (const user of inGameUsers) {
      // ุงูุจุญุซ ุนู ูุจุงุฑุงุฉ ูุดุทุฉ ูููุณุชุฎุฏู
      const activeGame = await Game.findOne({
        where: {
          [Op.or]: [
            { whiteUserId: user.user_id },
            { blackUserId: user.user_id }
          ],
          status: {
            [Op.in]: ['in-game', 'in_progress']
          }
        }
      });
      
      // ุฅุฐุง ูู ุชูุฌุฏ ูุจุงุฑุงุฉ ูุดุทุฉุ ุชุญุฏูุซ ุงูุญุงูุฉ ุฅูู online
      if (!activeGame) {
        await User.update(
          { state: 'online' },
          { where: { user_id: user.user_id } }
        );
        logger.info(`๐งน ุชู ุชูุธูู ุญุงูุฉ ุงููุณุชุฎุฏู ${user.user_id} ูู in-game ุฅูู online`);
        cleanedCount++;
      }
    }
    
    logger.info(`โ ุชู ุชูุธูู ${cleanedCount} ุญุงูุฉ ูุณุชุฎุฏู ูุชุฑููุฉ`);
    return cleanedCount;
  } catch (error) {
    logger.error('ุฎุทุฃ ูู ุชูุธูู ุญุงูุงุช ุงููุณุชุฎุฏููู ุงููุชุฑููุฉ:', error);
    return 0;
  }
}

// ุฏุงูุฉ ูุชูุธูู ุญุงูุงุช ุงููุณุชุฎุฏููู ุงูุฐูู ูุฏููู ุญุงูุฉ online ูููููู ุบูุฑ ูุชุตููู
export async function cleanupOrphanedOnlineStates() {
  try {
    logger.info('๐ ุจุฏุก ุชูุธูู ุญุงูุงุช ุงููุณุชุฎุฏููู ุงููุชุตููู ุงููุชุฑููุฉ...');
    
    // ุงูุจุญุซ ุนู ุงููุณุชุฎุฏููู ุงูุฐูู ุญุงูุชูู online
    const onlineUsers = await User.findAll({
      where: { state: 'online' }
    });
    
    let cleanedCount = 0;
    
    for (const user of onlineUsers) {
      // ุงูุชุญูู ูู ูุฌูุฏ ุงุชุตุงู socket ูุนูู
      if (!isUserOnline(user.user_id)) {
        await User.update(
          { state: 'offline' },
          { where: { user_id: user.user_id } }
        );
        logger.info(`๐งน ุชู ุชูุธูู ุญุงูุฉ ุงููุณุชุฎุฏู ${user.user_id} ูู online ุฅูู offline`);
        cleanedCount++;
      }
    }
    
    logger.info(`โ ุชู ุชูุธูู ${cleanedCount} ุญุงูุฉ ูุณุชุฎุฏู ูุชุตู ูุชุฑููุฉ`);
    return cleanedCount;
  } catch (error) {
    logger.error('ุฎุทุฃ ูู ุชูุธูู ุญุงูุงุช ุงููุณุชุฎุฏููู ุงููุชุตููู ุงููุชุฑููุฉ:', error);
    return 0;
  }
}

// ุฏุงูุฉ ูุฅุนุฏุงุฏ ping/pong ููุชุญูู ูู ุงูุงุชุตุงู
export function setupPingPong(socket, userId) {
  // ุฅุฑุณุงู ping ูู 30 ุซุงููุฉ
  const pingInterval = setInterval(() => {
    if (socket.connected) {
      socket.emit('ping');
    } else {
      clearInterval(pingInterval);
    }
  }, 30000);

  // ุงูุงุณุชูุงุน ููู pong
  socket.on('pong', () => {
    // ุงูุงุชุตุงู ูุดุท - ูุง ุญุงุฌุฉ ูุทุจุงุนุฉ ุฃู ุดูุก
  });

  // ุชูุธูู ุนูุฏ ุงูุงููุตุงู
  socket.on('disconnect', () => {
    clearInterval(pingInterval);
  });

  return pingInterval;
}

// Export shared data
export { activeUsers, activeGames, gameTimers }; 